<?php
/**
 * @file
 * Install, update and uninstall functions for the ding_campaign module.
 */

/**
 * Implements hook_schema().
 */
function ding_campaign_schema() {
  $schema = array();

  $schema['ding_campaign'] = array(
    'description' => 'Table holding campaign types types for easier access',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'cid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 128,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'cid' => array('cid'),
      'weight' => array('weight'),
    ),
  );

  $schema['ding_campaign_rules'] = array(
    'description' => 'Table for ding campaigns usage',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'cid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'rule' => array(
        'type' => 'varchar',
        'length' => 128,
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 128,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'nid' => array('nid'),
      'cid' => array('cid'),
      'rule' => array('rule'),
      'type' => array('type'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function ding_campaign_uninstall() {
  variable_del('ding_campaign_node_types');
  drupal_uninstall_schema('ding_campaign');
}

/**
 * Remove column 'theme' from table 'ding_campaign'
 */
function ding_campaign_update_7001(&$sandbox) {
  return db_drop_field('ding_campaign', 'theme');
}

/**
 * Implements hook_update_N().
 *
 * Add pane_id column to table 'ding_campaign'
 */
function ding_campaign_update_7002(&$sandbox) {
  return db_add_field('ding_campaign', 'pane_id', array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ));
}

/**
 * Implements hook_update_N().
 *
 * Remove column 'pane_id' from table 'ding_campaign'
 */
function ding_campaign_update_7003(&$sandbox) {
  return db_drop_field('ding_campaign', 'pane_id');
}

/**
 * Expand the rule column max length.
 */
function ding_campaign_update_7004() {
  $new_def = array(
    'type' => 'varchar',
    'length' => 255,
  );

  db_change_field('ding_campaign_rules', 'rule', 'rule', $new_def);
}

/**
 * Add BPI workflow field to 'ding_campaign'.
 */
function ding_campaign_update_7005() {
  $field_name = 'field_bpi_workflow';
  $field = field_info_field($field_name);
  if ($field) {
    // Create field.
    $entity_type = 'node';
    $bundle = 'ding_campaign';
    if (!field_info_instance($entity_type, $field_name, $bundle)) {
      $instance = array(
        'field_name' => $field_name,
        'entity_type' => $entity_type,
        'bundle' => $bundle,
        'label' => 'BPI workflow',
      );
      field_create_instance($instance);
    }

    // Create group.
    $group_name = 'group_workflow';
    $mode = 'form';
    $group = field_group_load_field_group($group_name, $entity_type, $bundle, $mode);

    echo var_export(['group' => $group], true);

    if (!$group) {
      $group = (object)array(
        'identifier' => $group_name . '|' . $entity_type . '|' . $bundle . '|' . $mode,
        'group_name' => $group_name,
        'entity_type' => $entity_type,
        'bundle' => $bundle,
        'mode' => $mode,
        'parent_name' => '',
        'table' => 'field_group',
        'type' => 'Normal',
        'export_type' => 1,
        'disabled' => FALSE,
        'label' => 'BPI',
        'weight' => '100',
        'format_type' => 'tab',
        'format_settings' => array(
          'label' => 'BPI',
          'instance_settings' => array(
            'required_fields' => 0,
            'classes' => '',
            'description' => 'Data in this group will only be saved when "Save and push" is used.',
          ),
          'formatter' => 'closed',
        ),
      );
    }

    $group->children = array($field_name);
    field_group_group_save($group);

    $group = field_group_load_field_group($group_name, $entity_type, $bundle, $mode);
    echo var_export(['group' => $group], true);
  }
}
